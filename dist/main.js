/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearElement\": () => (/* binding */ clearElement),\n/* harmony export */   \"listsContainer\": () => (/* binding */ listsContainer),\n/* harmony export */   \"renderLists\": () => (/* binding */ renderLists),\n/* harmony export */   \"listDisplayContainer\": () => (/* binding */ listDisplayContainer),\n/* harmony export */   \"listTitleElement\": () => (/* binding */ listTitleElement),\n/* harmony export */   \"tasksContainer\": () => (/* binding */ tasksContainer),\n/* harmony export */   \"taskTemplate\": () => (/* binding */ taskTemplate),\n/* harmony export */   \"editTask\": () => (/* binding */ editTask)\n/* harmony export */ });\nconst listsContainer = document.querySelector('[data-lists]');\r\nconst newListForm = document.querySelector('[data-new-list-form]');\r\nconst newListInput = document.querySelector('[data-new-list-input]');\r\nconst deleteListButton = document.querySelector('[data-delete-list-button]');\r\nconst listDisplayContainer = document.querySelector('[data-list-display-container]');\r\nconst listTitleElement = document.querySelector('[data-list-title');\r\nconst listCountElement = document.querySelector('[data-list-count');\r\n\r\nconst tasksContainer = document.querySelector('[data-tasks');\r\nconst taskTemplate = document.querySelector('#task-template');\r\nconst newTaskForm = document.querySelector('[data-new-task-form]');\r\nconst newTaskInput = document.querySelector('[data-new-task-input]');\r\nconst newTaskDate = document.querySelector('#due-date');\r\nconst newTaskPriority = document.querySelector('#priority');\r\nconst newTaskDescription = document.querySelector('#description');\r\nconst clearCompleteTasksButton = document.querySelector('[data-clear-complete-tasks-button]');\r\n\r\nlet lists = JSON.parse(localStorage.getItem('task.lists'));\r\nlet selectedListId = localStorage.getItem('task.selectedListId');\r\nconst overlay = document.querySelector('#overlay');\r\nconst formContainer = document.querySelector('.container');\r\nconst closeButton = document.querySelector('.close');\r\nconst addButton = document.querySelector('.add-btn');\r\nlet modalOpen = false;\r\n\r\n// localStorage.clear();\r\n\r\nconst clearElement = (element) => {\r\n  while (element.firstChild) {\r\n    element.removeChild(element.firstChild);\r\n  }\r\n};\r\n\r\nconst renderLists = () => {\r\n  lists.forEach((list) => {\r\n    const listElement = document.createElement('li');\r\n    listElement.innerText = list.name;\r\n    listElement.dataset.listId = list.id;\r\n    if (list.id === selectedListId) {\r\n      listElement.classList.add('active-list');\r\n    }\r\n    listsContainer.appendChild(listElement);\r\n  });\r\n};\r\n\r\nconst renderTaskCount = (selectedList) => {\r\n  const incompleteTaskCount = selectedList.tasks.filter(\r\n    (task) => !task.complete,\r\n  ).length;\r\n  const taskString = incompleteTaskCount === 1 ? 'task' : 'tasks';\r\n  listCountElement.innerText = `${incompleteTaskCount} ${taskString} remaining`;\r\n};\r\n\r\nconst colorTasks = (selectedList) => {\r\n  const todos = [...document.querySelectorAll('.todo')];\r\n  const checkbox = [...document.querySelectorAll('.checkbox')];\r\n  for (let i = 0; i < todos.length; i += 1) {\r\n    for (let i = 0; i < selectedList.tasks.length; i += 1) {\r\n      if (selectedList.tasks[i].priority === 'High') {\r\n        checkbox[i].style.border = '4px solid #ed1250';\r\n      } else if (selectedList.tasks[i].priority === 'Medium') {\r\n        checkbox[i].style.border = '4px solid #d3d00f';\r\n      } else {\r\n        checkbox[i].style.border = '4px solid #0fc53d';\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst openOrCloseAddTaskForm = () => {\r\n  const h2 = document.querySelector('.container h2');\r\n  const submitInput = document.querySelector('input[type=\"submit\"]');\r\n\r\n  if (modalOpen) {\r\n    formContainer.style.pointerEvents = 'none';\r\n    formContainer.style.transform = 'scale(0)';\r\n    overlay.style.opacity = 0;\r\n    modalOpen = false;\r\n  } else {\r\n    h2.textContent = 'New Task';\r\n    submitInput.value = 'Submit';\r\n    formContainer.style.pointerEvents = 'auto';\r\n    formContainer.style.transform = 'scale(1)';\r\n    overlay.style.opacity = 1;\r\n    modalOpen = true;\r\n  }\r\n};\r\n\r\nconst openOrCloseUpdateTaskForm = () => {\r\n  const h2 = document.querySelector('.container h2');\r\n  const submitInput = document.querySelector('input[type=\"submit\"]');\r\n\r\n  if (modalOpen) {\r\n    formContainer.style.pointerEvents = 'none';\r\n    formContainer.style.transform = 'scale(0)';\r\n    overlay.style.opacity = 0;\r\n    modalOpen = false;\r\n  } else {\r\n    h2.textContent = 'Update Task';\r\n    submitInput.value = 'Update';\r\n    formContainer.style.pointerEvents = 'auto';\r\n    formContainer.style.transform = 'scale(1)';\r\n    overlay.style.opacity = 1;\r\n    modalOpen = true;\r\n  }\r\n};\r\n\r\nconst renderTasks = (selectedList) => {\r\n  if (selectedList.tasks.length === 0) {\r\n    listDisplayContainer.style.background = 'center no-repeat';\r\n    listDisplayContainer.style.backgroundSize = '35%';\r\n  } else {\r\n    listDisplayContainer.style.background = '';\r\n  }\r\n\r\n  selectedList.tasks.forEach((task) => {\r\n    const taskElement = document.importNode(taskTemplate.content, true);\r\n    const checkbox = taskElement.querySelector('input');\r\n    checkbox.id = task.id;\r\n    checkbox.checked = task.complete;\r\n    const label = taskElement.querySelector('label');\r\n    label.htmlFor = task.id;\r\n\r\n    const lineBreak = document.createElement('br');\r\n    label.append(task.name, ', ', task.date, lineBreak, task.description);\r\n    const editButton = document.createElement('p');\r\n    editButton.innerHTML = '<i class=\"far fa-edit\"></i>';\r\n    editButton.classList.add('edit');\r\n    // eslint-disable-next-line no-use-before-define\r\n    editButton.addEventListener('click', () => editTask(task, label));\r\n    const todoTask = taskElement.querySelector('.task');\r\n    todoTask.append(editButton);\r\n    tasksContainer.appendChild(taskElement);\r\n  });\r\n};\r\n\r\nconst render = () => {\r\n  clearElement(listsContainer);\r\n  renderLists();\r\n  const selectedList = lists.find((list) => list.id === selectedListId);\r\n\r\n  if (selectedListId === null) {\r\n    listDisplayContainer.style.display = 'none';\r\n  } else {\r\n    listDisplayContainer.style.display = '';\r\n    listTitleElement.innerHTML = `${selectedList.name}`;\r\n    renderTaskCount(selectedList);\r\n    clearElement(tasksContainer);\r\n    renderTasks(selectedList);\r\n    colorTasks(selectedList);\r\n  }\r\n};\r\n\r\nconst renderAndSave = () => {\r\n  render();\r\n  localStorage.setItem('task.lists', JSON.stringify(lists));\r\n  localStorage.setItem('task.selectedListId', selectedListId);\r\n};\r\n\r\n\r\nconst editTask = (task, label) => {\r\n  openOrCloseUpdateTaskForm();\r\n  newTaskInput.value = task.name;\r\n  newTaskDate.value = task.date;\r\n  newTaskPriority.value = task.priority;\r\n  newTaskDescription.value = task.description;\r\n  newTaskForm.addEventListener('submit', () => {\r\n    task.name = newTaskInput.value;\r\n    task.date = newTaskDate.value;\r\n    task.priority = newTaskPriority.value;\r\n    task.description = newTaskDescription.value;\r\n    label.innerHTML = `<span class=\"checkbox\"></span>${task.name}<br>${task.date}<br>${task.description}`;\r\n    renderAndSave();\r\n  });\r\n};\r\n\r\nconst createList = () => ({ id: Date.now().toString(), name: newListInput.value, tasks: [] });\r\n\r\nconst createTask = () => ({\r\n  id: Date.now().toString(),\r\n  name: newTaskInput.value,\r\n  date: newTaskDate.value,\r\n  priority: newTaskPriority.value,\r\n  description: newTaskDescription.value,\r\n  complete: false,\r\n});\r\n\r\nnewListForm.addEventListener('submit', (e) => {\r\n  e.preventDefault();\r\n  const listName = newListInput.value;\r\n  if (listName === null || listName === '') return;\r\n  const list = createList();\r\n  newListInput.value = null;\r\n  lists.push(list);\r\n  renderAndSave();\r\n});\r\n\r\nlistsContainer.addEventListener('click', (e) => {\r\n  if (e.target.tagName.toLowerCase() === 'li') {\r\n    selectedListId = e.target.dataset.listId;\r\n    renderAndSave();\r\n  }\r\n});\r\n\r\ndeleteListButton.addEventListener('click', () => {\r\n  lists = lists.filter((list) => list.id !== selectedListId);\r\n  selectedListId = null;\r\n  renderAndSave();\r\n});\r\n\r\nnewTaskForm.addEventListener('submit', (e) => {\r\n  e.preventDefault();\r\n  const taskName = newTaskInput.value;\r\n  const h2 = document.querySelector('.container h2');\r\n  if (h2.textContent === 'Update Task') return;\r\n  if (taskName === null || taskName === '') return;\r\n  const task = createTask();\r\n  newTaskInput.value = null;\r\n  const selectedList = lists.find((list) => list.id === selectedListId);\r\n  selectedList.tasks.push(task);\r\n  renderAndSave();\r\n});\r\n\r\nclearCompleteTasksButton.addEventListener('click', () => {\r\n  const selectedList = lists.find((list) => list.id === selectedListId);\r\n  selectedList.tasks = selectedList.tasks.filter((task) => !task.complete);\r\n  renderAndSave();\r\n});\r\n\r\ntasksContainer.addEventListener('click', (e) => {\r\n  if (e.target.tagName.toLowerCase() === 'input') {\r\n    const selectedList = lists.find((list) => list.id === selectedListId);\r\n    const selectedTask = selectedList.tasks.find(\r\n      (task) => task.id === e.target.id,\r\n    );\r\n    selectedTask.complete = e.target.checked;\r\n    renderAndSave();\r\n  }\r\n});\r\n\r\naddButton.addEventListener('click', () => {\r\n  newTaskForm.reset();\r\n  openOrCloseAddTaskForm();\r\n\r\n  if (modalOpen) {\r\n    addButton.style.background = '#2185d5';\r\n    addButton.style.transform = 'rotate(45deg)';\r\n  } else {\r\n    addButton.style.background = 'transparent';\r\n    addButton.style.transform = 'rotate(0)';\r\n  }\r\n});\r\n\r\nconst closeModal = () => {\r\n  formContainer.style.transform = 'scale(0)';\r\n  overlay.style.opacity = 0;\r\n  modalOpen = false;\r\n};\r\n\r\ncloseButton.addEventListener('click', () => {\r\n  closeModal();\r\n  addButton.style.background = 'transparent';\r\n  addButton.style.transform = 'rotate(0)';\r\n});\r\n\r\nformContainer.addEventListener('submit', (e) => {\r\n  e.preventDefault();\r\n  openOrCloseAddTaskForm();\r\n  addButton.style.background = 'transparent';\r\n  addButton.style.transform = 'rotate(0)';\r\n  modalOpen = false;\r\n});\r\n\r\nrender();\r\n\r\n\n\n//# sourceURL=webpack://todolist/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;